# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule GitHubV3RESTAPI.Model.Issue do
  @moduledoc """
  Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
  """

  @derive [Poison.Encoder]
  defstruct [
    :id,
    :node_id,
    :url,
    :repository_url,
    :labels_url,
    :comments_url,
    :events_url,
    :html_url,
    :number,
    :state,
    :title,
    :body,
    :user,
    :labels,
    :assignee,
    :assignees,
    :milestone,
    :locked,
    :active_lock_reason,
    :comments,
    :pull_request,
    :closed_at,
    :created_at,
    :updated_at,
    :closed_by,
    :body_html,
    :body_text,
    :timeline_url,
    :repository,
    :performed_via_github_app,
    :author_association,
    :reactions
  ]

  @type t :: %__MODULE__{
          :id => integer(),
          :node_id => String.t(),
          :url => String.t(),
          :repository_url => String.t(),
          :labels_url => String.t(),
          :comments_url => String.t(),
          :events_url => String.t(),
          :html_url => String.t(),
          :number => integer(),
          :state => String.t(),
          :title => String.t(),
          :body => String.t() | nil,
          :user => SimpleUser | nil,
          :labels => [OneOfstringobject],
          :assignee => SimpleUser | nil,
          :assignees => [GitHubV3RESTAPI.Model.SimpleUser.t()] | nil,
          :milestone => Milestone | nil,
          :locked => boolean(),
          :active_lock_reason => String.t() | nil,
          :comments => integer(),
          :pull_request => GitHubV3RESTAPI.Model.IssueSimplePullRequest.t() | nil,
          :closed_at => DateTime.t() | nil,
          :created_at => DateTime.t(),
          :updated_at => DateTime.t(),
          :closed_by => SimpleUser | nil,
          :body_html => String.t() | nil,
          :body_text => String.t() | nil,
          :timeline_url => String.t() | nil,
          :repository => GitHubV3RESTAPI.Model.Repository.t() | nil,
          :performed_via_github_app => Integration | nil,
          :author_association => GitHubV3RESTAPI.Model.AuthorAssociation.t(),
          :reactions => GitHubV3RESTAPI.Model.ReactionRollup.t() | nil
        }
end

defimpl Poison.Decoder, for: GitHubV3RESTAPI.Model.Issue do
  import GitHubV3RESTAPI.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:user, :struct, GitHubV3RESTAPI.Model.SimpleUser, options)
    |> deserialize(:labels, :list, GitHubV3RESTAPI.Model.OneOfstringobject, options)
    |> deserialize(:assignee, :struct, GitHubV3RESTAPI.Model.SimpleUser, options)
    |> deserialize(:assignees, :list, GitHubV3RESTAPI.Model.SimpleUser, options)
    |> deserialize(:milestone, :struct, GitHubV3RESTAPI.Model.Milestone, options)
    |> deserialize(:pull_request, :struct, GitHubV3RESTAPI.Model.IssueSimplePullRequest, options)
    |> deserialize(:closed_by, :struct, GitHubV3RESTAPI.Model.SimpleUser, options)
    |> deserialize(:repository, :struct, GitHubV3RESTAPI.Model.Repository, options)
    |> deserialize(:performed_via_github_app, :struct, GitHubV3RESTAPI.Model.Integration, options)
    |> deserialize(:author_association, :struct, GitHubV3RESTAPI.Model.AuthorAssociation, options)
    |> deserialize(:reactions, :struct, GitHubV3RESTAPI.Model.ReactionRollup, options)
  end
end
