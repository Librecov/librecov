# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule GitHubV3RESTAPI.Api.Meta do
  @moduledoc """
  API calls for all endpoints tagged `Meta`.
  """

  alias GitHubV3RESTAPI.Connection
  import GitHubV3RESTAPI.RequestBuilder

  @doc """
  Get GitHub meta information
  Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/).\"  **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.ApiOverview.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec meta_get(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, GitHubV3RESTAPI.Model.ApiOverview.t()} | {:error, Tesla.Env.t()}
  def meta_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/meta")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %GitHubV3RESTAPI.Model.ApiOverview{}},
      {304, false}
    ])
  end

  @doc """
  Get Octocat
  Get the octocat as ASCII art

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :s (String.t): The words to show in Octocat's speech bubble
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec meta_get_octocat(Tesla.Env.client(), keyword()) ::
          {:ok, String.t()} | {:error, Tesla.Env.t()}
  def meta_get_octocat(connection, opts \\ []) do
    optional_params = %{
      :s => :query
    }

    %{}
    |> method(:get)
    |> url("/octocat")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Get the Zen of GitHub
  Get a random sentence from the Zen of GitHub

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec meta_get_zen(Tesla.Env.client(), keyword()) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def meta_get_zen(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/zen")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GitHub API Root
  Get Hypermedia links to resources accessible in GitHub's REST API

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.InlineResponse200.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec meta_root(Tesla.Env.client(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.InlineResponse200.t()} | {:error, Tesla.Env.t()}
  def meta_root(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %GitHubV3RESTAPI.Model.InlineResponse200{}}
    ])
  end
end
