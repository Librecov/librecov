# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule GitHubV3RESTAPI.Api.Git do
  @moduledoc """
  API calls for all endpoints tagged `Git`.
  """

  alias GitHubV3RESTAPI.Connection
  import GitHubV3RESTAPI.RequestBuilder

  @doc """
  Create a blob

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject85): 
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.ShortBlob.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_create_blob(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.ValidationError.t()}
          | {:ok, GitHubV3RESTAPI.Model.BasicError.t()}
          | {:ok, GitHubV3RESTAPI.Model.ShortBlob.t()}
          | {:error, Tesla.Env.t()}
  def git_create_blob(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/git/blobs")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %GitHubV3RESTAPI.Model.ShortBlob{}},
      {404, %GitHubV3RESTAPI.Model.BasicError{}},
      {409, %GitHubV3RESTAPI.Model.BasicError{}},
      {403, %GitHubV3RESTAPI.Model.BasicError{}},
      {422, %GitHubV3RESTAPI.Model.ValidationError{}}
    ])
  end

  @doc """
  Create a commit
  Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).  **Signature verification object**  The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:  | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. |  These are the possible values for `reason` in the `verification` object:  | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject86): 
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.GitCommit.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_create_commit(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.ValidationError.t()}
          | {:ok, GitHubV3RESTAPI.Model.BasicError.t()}
          | {:ok, GitHubV3RESTAPI.Model.GitCommit.t()}
          | {:error, Tesla.Env.t()}
  def git_create_commit(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/git/commits")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %GitHubV3RESTAPI.Model.GitCommit{}},
      {422, %GitHubV3RESTAPI.Model.ValidationError{}},
      {404, %GitHubV3RESTAPI.Model.BasicError{}}
    ])
  end

  @doc """
  Create a reference
  Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject87): 
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.GitRef.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_create_ref(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.GitRef.t()}
          | {:ok, GitHubV3RESTAPI.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def git_create_ref(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/git/refs")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %GitHubV3RESTAPI.Model.GitRef{}},
      {422, %GitHubV3RESTAPI.Model.ValidationError{}}
    ])
  end

  @doc """
  Create a tag object
  Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.  **Signature verification object**  The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:  | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. |  These are the possible values for `reason` in the `verification` object:  | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject89): 
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.GitTag.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_create_tag(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.ValidationError.t()}
          | {:ok, GitHubV3RESTAPI.Model.GitTag.t()}
          | {:error, Tesla.Env.t()}
  def git_create_tag(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/git/tags")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %GitHubV3RESTAPI.Model.GitTag{}},
      {422, %GitHubV3RESTAPI.Model.ValidationError{}}
    ])
  end

  @doc """
  Create a tree
  The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.  If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \"[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)\" and \"[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference).\"

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject90): 
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.GitTree.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_create_tree(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.GitTree.t()}
          | {:ok, GitHubV3RESTAPI.Model.ValidationError.t()}
          | {:ok, GitHubV3RESTAPI.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def git_create_tree(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/git/trees")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %GitHubV3RESTAPI.Model.GitTree{}},
      {422, %GitHubV3RESTAPI.Model.ValidationError{}},
      {404, %GitHubV3RESTAPI.Model.BasicError{}},
      {403, %GitHubV3RESTAPI.Model.BasicError{}}
    ])
  end

  @doc """
  Delete a reference

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - ref (String.t): ref parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_delete_ref(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, GitHubV3RESTAPI.Model.ValidationError.t()} | {:error, Tesla.Env.t()}
  def git_delete_ref(connection, owner, repo, ref, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/git/refs/#{ref}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {422, %GitHubV3RESTAPI.Model.ValidationError{}}
    ])
  end

  @doc """
  Get a blob
  The `content` in the response will always be Base64 encoded.  _Note_: This API supports blobs up to 100 megabytes in size.

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - file_sha (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.Blob.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_get_blob(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.ValidationError.t()}
          | {:ok, GitHubV3RESTAPI.Model.BasicError.t()}
          | {:ok, GitHubV3RESTAPI.Model.Blob.t()}
          | {:error, Tesla.Env.t()}
  def git_get_blob(connection, owner, repo, file_sha, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/git/blobs/#{file_sha}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %GitHubV3RESTAPI.Model.Blob{}},
      {404, %GitHubV3RESTAPI.Model.BasicError{}},
      {422, %GitHubV3RESTAPI.Model.ValidationError{}},
      {403, %GitHubV3RESTAPI.Model.BasicError{}}
    ])
  end

  @doc """
  Get a commit
  Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).  **Signature verification object**  The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:  | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. |  These are the possible values for `reason` in the `verification` object:  | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - commit_sha (String.t): commit_sha parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.GitCommit.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_get_commit(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.BasicError.t()}
          | {:ok, GitHubV3RESTAPI.Model.GitCommit.t()}
          | {:error, Tesla.Env.t()}
  def git_get_commit(connection, owner, repo, commit_sha, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/git/commits/#{commit_sha}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %GitHubV3RESTAPI.Model.GitCommit{}},
      {404, %GitHubV3RESTAPI.Model.BasicError{}}
    ])
  end

  @doc """
  Get a reference
  Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.  **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - ref (String.t): ref parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.GitRef.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_get_ref(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.GitRef.t()}
          | {:ok, GitHubV3RESTAPI.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def git_get_ref(connection, owner, repo, ref, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/git/ref/#{ref}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %GitHubV3RESTAPI.Model.GitRef{}},
      {404, %GitHubV3RESTAPI.Model.BasicError{}}
    ])
  end

  @doc """
  Get a tag
  **Signature verification object**  The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:  | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. |  These are the possible values for `reason` in the `verification` object:  | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - tag_sha (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.GitTag.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_get_tag(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.BasicError.t()}
          | {:ok, GitHubV3RESTAPI.Model.GitTag.t()}
          | {:error, Tesla.Env.t()}
  def git_get_tag(connection, owner, repo, tag_sha, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/git/tags/#{tag_sha}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %GitHubV3RESTAPI.Model.GitTag{}},
      {404, %GitHubV3RESTAPI.Model.BasicError{}}
    ])
  end

  @doc """
  Get a tree
  Returns a single tree using the SHA1 value for that tree.  If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - tree_sha (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :recursive (String.t): Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees.
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.GitTree.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_get_tree(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.GitTree.t()}
          | {:ok, GitHubV3RESTAPI.Model.ValidationError.t()}
          | {:ok, GitHubV3RESTAPI.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def git_get_tree(connection, owner, repo, tree_sha, opts \\ []) do
    optional_params = %{
      :recursive => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/git/trees/#{tree_sha}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %GitHubV3RESTAPI.Model.GitTree{}},
      {422, %GitHubV3RESTAPI.Model.ValidationError{}},
      {404, %GitHubV3RESTAPI.Model.BasicError{}}
    ])
  end

  @doc """
  List matching references
  Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.  When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.  **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".  If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - ref (String.t): ref parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%GitRef{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_list_matching_refs(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, list(GitHubV3RESTAPI.Model.GitRef.t())} | {:error, Tesla.Env.t()}
  def git_list_matching_refs(connection, owner, repo, ref, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/git/matching-refs/#{ref}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%GitHubV3RESTAPI.Model.GitRef{}]}
    ])
  end

  @doc """
  Update a reference

  ## Parameters

  - connection (GitHubV3RESTAPI.Connection): Connection to server
  - owner (String.t): 
  - repo (String.t): 
  - ref (String.t): ref parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject88): 
  ## Returns

  {:ok, GitHubV3RESTAPI.Model.GitRef.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec git_update_ref(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, GitHubV3RESTAPI.Model.GitRef.t()}
          | {:ok, GitHubV3RESTAPI.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def git_update_ref(connection, owner, repo, ref, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/git/refs/#{ref}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %GitHubV3RESTAPI.Model.GitRef{}},
      {422, %GitHubV3RESTAPI.Model.ValidationError{}}
    ])
  end
end
